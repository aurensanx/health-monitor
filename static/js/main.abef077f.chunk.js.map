{"version":3,"sources":["pages/ECare.js","DataSource.js","App.js","serviceWorker.js","index.js"],"names":["Data","className","Hcis","Lab","Image","Complications","MindRay","props","patient","frCardiaca","so2","sistolica","diastolica","WellA","temperatura","toFixed","frRespiratoria","ECare","patientId","useParams","patientInfo","patientsInfo","find","p","id","console","log","document","title","screens","Screens","map","r","key","Cardio","color","to","Home","App","useState","setPatientsInfo","useEffect","intervalId","setInterval","Math","floor","random","score","data","getScoreFrCardiaca","getScoreFrRespiratoria","getScoreTemperatura","getScoreSistolica","getScoreDiastolica","getScorePatient","getPatientColor","generatePatientInfo","clearInterval","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.abef077f.chunk.js","sourcesContent":["import React from 'react';\nimport './ECare.scss';\nimport {useParams} from 'react-router';\n\nfunction Data() {\n  return (<div className=\"data\">\n    <div>Datos filiación:</div>\n    <div>Edad, peso</div>\n    <div>Enf de base</div>\n    <div>Localización</div>\n    <div>Motivo ingreso</div>\n  </div>)\n}\n\nfunction Hcis() {\n  return (<div className=\"hcis\">\n    <div>HCIS:</div>\n    <div>Dispositivos</div>\n    <div>Diuresis</div>\n    <div>Balance hídrico</div>\n    <div>SAPI</div>\n  </div>)\n}\n\nfunction Lab() {\n  return (<div className=\"lab\">Laboratorio</div>)\n}\n\nfunction Image() {\n  return (<div className=\"image\">Imagen</div>)\n}\n\nfunction Complications() {\n  return (<div className=\"complications\">\n    <div>Complicaciones</div>\n    <div>Neumotórax</div>\n    <div>Derrame pleural</div>\n    <div>Derrame pericárdico</div>\n  </div>)\n}\n\nfunction MindRay(props) {\n  return (<div className=\"mindRay\">\n    <div className=\"mindRayTitle\">MindRay</div>\n    <div className=\"frCardiaca\">{props.patient?.frCardiaca}</div>\n    <div className=\"so2\">{props.patient?.so2}</div>\n    <div className=\"tension\">{props.patient?.sistolica + ' / ' + props.patient?.diastolica}</div>\n  </div>)\n}\n\nfunction WellA(props) {\n  return (<div className=\"wellA\">\n    <div className=\"waTitle\">WA</div>\n    <div className=\"temperatura\">{(props.patient?.temperatura || 0).toFixed(1)}</div>\n    <div className=\"frRespiratoria\">{props.patient?.frRespiratoria}</div>\n  </div>)\n}\n\nexport function ECare(props) {\n  const {patientId} = useParams();\n  const patientInfo = props.patientsInfo.find(p => p.id === +patientId);\n  console.log(patientInfo.patient);\n  document.title = 'Pantalla eCare';\n  return (<div className=\"ECare\">\n    <Data/>\n    <MindRay patient={patientInfo.patient}/>\n    <WellA patient={patientInfo.patient}/>\n    <Hcis/>\n    <Lab/>\n    <Image/>\n    <Complications/>\n  </div>)\n}\n","const generateSO2 = () => Math.floor((Math.random() * 10) + 90);\nconst generateFrCardiaca = () => Math.floor((Math.random() * 45) + 110);\nconst generateFrRespiratoria = () => Math.floor((Math.random() * 18) + 28);\nconst generateTemperatura = () => Math.random() * 2 + 36;\nconst generateSistolica = () => Math.floor(Math.random() * 20 + 52);\nconst generateDiastolica = () => Math.floor(Math.random() * 25 + 28);\n\n\nconst generateRandomPatient = () => ({\n  so2: generateSO2(),\n  frCardiaca: generateFrCardiaca(),\n  frRespiratoria: generateFrRespiratoria(),\n  temperatura: generateTemperatura(),\n  sistolica: generateSistolica(),\n  diastolica: generateDiastolica(),\n});\n\n\nconst getScoreSO2 = data => {\n  if (data < 85) {\n    return 3;\n  } else if (data < 90) {\n    return 2;\n  } else if (data < 94) {\n    return 1\n  }\n  return 0;\n}\n\nconst getScoreFrCardiaca = data => {\n  if (data > 180 || data < 95) {\n    return 3;\n  } else if (data > 160 || data < 100) {\n    return 2;\n  } else if (data > 145 || data < 120) {\n    return 1\n  }\n  return 0;\n}\n\nconst getScoreFrRespiratoria = data => {\n  if (data > 65 || data < 20) {\n    return 3;\n  } else if (data > 55) {\n    return 2;\n  } else if (data > 45 || data < 30) {\n    return 1\n  }\n  return 0;\n}\n\nconst getScoreTemperatura = data => {\n  if (data > 38.5) {\n    return 2;\n  } else if (data > 37.5) {\n    return 1\n  }\n  return 0;\n}\n\nconst getScoreSistolica = data => {\n  if (data > 90 || data < 35) {\n    return 3;\n  } else if (data > 80 || data < 45) {\n    return 2;\n  } else if (data > 70 || data < 55) {\n    return 1\n  }\n  return 0;\n}\n\nconst getScoreDiastolica = data => {\n  if (data > 70 || data < 20) {\n    return 3;\n  } else if (data > 60 || data < 25) {\n    return 2;\n  } else if (data > 50 || data < 30) {\n    return 1\n  }\n  return 0;\n}\n\nconst getScorePatient = ({so2, frCardiaca, frRespiratoria, temperatura, sistolica, diastolica}) => {\n  const scoreSO2 = getScoreSO2(so2);\n  const scoreFrCardiaca = getScoreFrCardiaca(frCardiaca);\n  const scoreFrRespiratoria = getScoreFrRespiratoria(frRespiratoria);\n  const scoreTemperatura = getScoreTemperatura(temperatura);\n  const scoreSistolica = getScoreSistolica(sistolica);\n  const scoreDiastolica = getScoreDiastolica(diastolica);\n\n  return scoreSO2 + scoreFrCardiaca + scoreFrRespiratoria + scoreTemperatura + scoreSistolica + scoreDiastolica;\n}\n\n\nconst getPatientColor = score => {\n  if (score > 3) {\n    return 'red';\n  } else if (score > 1) {\n    return 'yellow';\n  } else {\n    return 'green';\n  }\n}\n\nconst generatePatientInfo = id => {\n  const patient = generateRandomPatient();\n  const score = getScorePatient(patient);\n  const color = getPatientColor(score);\n  return {\n    id,\n    patient,\n    score,\n    color,\n  }\n}\n\nexport const getPatientsInfo = () => [0, 1, 2, 3, 4, 5].map(id => generatePatientInfo(id));\nexport const getInitialPatientInfo = () => [0, 1, 2, 3, 4, 5].map(id => ({id}));\n\n\n\n","import React, {useEffect, useState} from 'react';\nimport './App.scss';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport {ECare} from \"./pages/ECare\";\nimport {getInitialPatientInfo, getPatientsInfo} from \"./DataSource\";\n\nconst screens = ['BQ', 'UCI', 'Neonatos', 'Planta Cardio-CCV', 'HD/Arrit', 'Despertar HD/Arrit', 'CEE', 'Domicilio']\n\nfunction Screens() {\n  return (\n    <div className=\"screen\">{screens.map(r => <div key={r}>{r}</div>)}</div>\n  )\n}\n\nfunction Cardio(props) {\n  // const [patientsInfo, setPatientsInfo] = useState(getInitialPatientInfo());\n  // useEffect(() => {\n  //   const intervalId = setInterval(() => {\n  //     setPatientsInfo(getPatientsInfo());\n  //   }, 2000);\n  //\n  //   return function cleanup() {\n  //     clearInterval(intervalId);\n  //   };\n  // });\n  return (\n    <div className=\"cardio\">{props.patientsInfo.map(p => <Link className={p.color || 'green'} to={\"/ecare/\" + p.id} key={p.id}/>)}</div>\n  )\n}\n\nfunction Home(props) {\n  document.title = 'Pantalla Flujos - Paciente';\n  return (\n    <div className=\"App\">\n      <Screens />\n      <Cardio {...props}/>\n    </div>\n  )\n}\n\nfunction App() {\n  const [patientsInfo, setPatientsInfo] = useState(getInitialPatientInfo());\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setPatientsInfo(getPatientsInfo());\n    }, 2000);\n\n    return function cleanup() {\n      clearInterval(intervalId);\n    };\n  });\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home patientsInfo={patientsInfo}/>\n        </Route>\n        <Route path=\"/ecare/:patientId\" >\n          <ECare patientsInfo={patientsInfo}/>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}